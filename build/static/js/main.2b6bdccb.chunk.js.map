{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","baseAccount","Keypair","PublicKey","programID","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","user","wallet","getGifList","onInputChange","event","value","target","connection","Connection","Provider","createGifAccount","initialize","systemProgram","programId","signers","account","fetch","useEffect","addEventListener","className","onClick","type","placeholder","onChange","map","item","index","src","gifLink","alt","userAddress","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b6bdccb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport {useEffect, useState} from 'react';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\n\n// Constants\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Embed public key of program account\nconst baseAccount = new PublicKey('CBwSeef62zCY3CbUgQnKQPmokozQp5FDcsfMwFUgXHX2');\n\n// Get our program's id form the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devent.\nconst network = clusterApiUrl('devnet');\n\n// Control's how we want to acknowledge when a trasnaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// TEST GIFS\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\n// buildspace twitter stuff\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  // Is phantom wallet connected?\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {solana} = window;\n\n      if(solana) {\n        if(solana.isPhantom) {\n          console.log('Phantom Wallet is found!');\n          const response = await solana.connect({onlyIfTrusted: true});\n          console.log('Connected with PubKey:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        } else {\n          alert('Solana obj is not found - get Phantom Wallet');\n        }\n      }\n    } catch (err) {\n      console.log('err');\n    }\n  };\n\n  // Connect Wallet Logic\n  const connectWallet = async () => {\n    // Render UI when user wallet is not connected\n    const {solana} = window;\n\n    if(solana) {\n      const response = await solana.connect();\n      console.log('Connected with pubKey:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  // Send Gif from valid link to our grid\n  const sendGif = async () => {\n    if(inputValue.length === 0) {\n      console.log('No gif link given!');\n      return;\n    }\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log('Gif successfully sent to our program', inputValue);\n\n      await getGifList();\n    } catch (err) {\n      console.log('Error sending gif to program', err);\n    }\n  };\n\n  // Get Input Change\n  const onInputChange = (event) => {\n    const {value} = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  // Call Initialize\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log('ping')\n      await program.rpc.initialize({\n        accounts: {\n          baseAccount: baseAccount,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log('Created a new BaseAccount w/ address:', baseAccount.toString());\n      await getGifList();\n  \n    } catch(err) {\n      console.log('Error creating BaseAccount account:', err);\n    }\n  }\n  \n  const renderNotConnectedContainer = () => (\n    <button\n      className='cta-button connect-wallet-button'\n      onClick={connectWallet}\n    >\n      Connect Wallet!\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // Program Account Not init\n    if(gifList === null) {\n      return (\n        <div className='connected-container'>\n          <button className='cta-button submit-gif-button' onClick={createGifAccount}>One Time Init for GIF Program Account</button>\n        </div>\n      )\n    }\n    else {\n      // Account exists and user can submit gifs\n      return(\n      <div className='connected-container'>\n        <input type='text' placeholder='Enter gif link here!' value={inputValue} onChange={onInputChange}/>\n        <button className='cta-button submit-gif-button' onClick={sendGif}>Submit Gif!</button>\n        <div className='gif-grid'>\n          {gifList.map((item, index) => (\n            <div className='gif-item' key={index}>\n              <img src={item.gifLink} alt={item.gifLink}/>\n              <p className='submit-text'>Submitted by: {item.userAddress.toString()}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n      )\n    }\n  };\n\n  // get gif list\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount);\n      \n      console.log('Account retrieved', account)\n      setGifList(account.gifList)\n  \n    } catch (err) {\n      console.log('getGifs error: ', err)\n      setGifList(null);\n    }\n  }\n\n  // Check for connected wallet\n  useEffect(() => {\n    window.addEventListener('load', async (event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  // Fetch gif list from connected wallet\n  useEffect(() => {\n    if(walletAddress) {\n      console.log('Fetching Gif List...');\n      // Call solana program && set state\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">Gifurry</p>\n          <p className=\"sub-text\">\n          ✨ add gifs of fur frens to explore the metaverse with ✨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}