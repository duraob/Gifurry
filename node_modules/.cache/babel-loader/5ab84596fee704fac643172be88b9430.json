{"ast":null,"code":"import _createClass from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nexport var IdlError = /*#__PURE__*/function (_Error) {\n  _inherits(IdlError, _Error);\n\n  var _super = _createSuper(IdlError);\n\n  function IdlError(message) {\n    var _this;\n\n    _classCallCheck(this, IdlError);\n\n    _this = _super.call(this, message);\n    _this.name = \"IdlError\";\n    return _this;\n  }\n\n  return IdlError;\n}( /*#__PURE__*/_wrapNativeSuper(Error)); // An error from a user defined program.\n\nexport var ProgramError = /*#__PURE__*/function (_Error2) {\n  _inherits(ProgramError, _Error2);\n\n  var _super2 = _createSuper(ProgramError);\n\n  function ProgramError(code, msg) {\n    var _this2;\n\n    _classCallCheck(this, ProgramError);\n\n    for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      params[_key - 2] = arguments[_key];\n    }\n\n    _this2 = _super2.call.apply(_super2, [this].concat(params));\n    _this2.code = code;\n    _this2.msg = msg;\n    return _this2;\n  }\n\n  _createClass(ProgramError, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.msg;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(err, idlErrors) {\n      // TODO: don't rely on the error string. web3.js should preserve the error\n      //       code information instead of giving us an untyped string.\n      var components = err.toString().split(\"custom program error: \");\n\n      if (components.length !== 2) {\n        return null;\n      }\n\n      var errorCode;\n\n      try {\n        errorCode = parseInt(components[1]);\n      } catch (parseErr) {\n        return null;\n      } // Parse user error.\n\n\n      var errorMsg = idlErrors.get(errorCode);\n\n      if (errorMsg !== undefined) {\n        return new ProgramError(errorCode, errorMsg, errorCode + \": \" + errorMsg);\n      } // Parse framework internal error.\n\n\n      errorMsg = LangErrorMessage.get(errorCode);\n\n      if (errorMsg !== undefined) {\n        return new ProgramError(errorCode, errorMsg, errorCode + \": \" + errorMsg);\n      } // Unable to parse the error. Just return the untranslated error.\n\n\n      return null;\n    }\n  }]);\n\n  return ProgramError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar LangErrorCode = {\n  // Instructions.\n  InstructionMissing: 100,\n  InstructionFallbackNotFound: 101,\n  InstructionDidNotDeserialize: 102,\n  InstructionDidNotSerialize: 103,\n  // IDL instructions.\n  IdlInstructionStub: 120,\n  IdlInstructionInvalidProgram: 121,\n  // Constraints.\n  ConstraintMut: 140,\n  ConstraintHasOne: 141,\n  ConstraintSigner: 142,\n  ConstraintRaw: 143,\n  ConstraintOwner: 144,\n  ConstraintRentExempt: 145,\n  ConstraintSeeds: 146,\n  ConstraintExecutable: 147,\n  ConstraintState: 148,\n  ConstraintAssociated: 149,\n  ConstraintAssociatedInit: 150,\n  ConstraintClose: 151,\n  ConstraintAddress: 152,\n  // Accounts.\n  AccountDiscriminatorAlreadySet: 160,\n  AccountDiscriminatorNotFound: 161,\n  AccountDiscriminatorMismatch: 162,\n  AccountDidNotDeserialize: 163,\n  AccountDidNotSerialize: 164,\n  AccountNotEnoughKeys: 165,\n  AccountNotMutable: 166,\n  AccountNotProgramOwned: 167,\n  InvalidProgramId: 168,\n  InvalidProgramIdExecutable: 169,\n  // State.\n  StateInvalidAddress: 180,\n  // Used for APIs that shouldn't be used anymore.\n  Deprecated: 299\n};\nvar LangErrorMessage = new Map([// Instructions.\n[LangErrorCode.InstructionMissing, \"8 byte instruction identifier not provided\"], [LangErrorCode.InstructionFallbackNotFound, \"Fallback functions are not supported\"], [LangErrorCode.InstructionDidNotDeserialize, \"The program could not deserialize the given instruction\"], [LangErrorCode.InstructionDidNotSerialize, \"The program could not serialize the given instruction\"], // Idl instructions.\n[LangErrorCode.IdlInstructionStub, \"The program was compiled without idl instructions\"], [LangErrorCode.IdlInstructionInvalidProgram, \"The transaction was given an invalid program for the IDL instruction\"], // Constraints.\n[LangErrorCode.ConstraintMut, \"A mut constraint was violated\"], [LangErrorCode.ConstraintHasOne, \"A has_one constraint was violated\"], [LangErrorCode.ConstraintSigner, \"A signer constraint was violated\"], [LangErrorCode.ConstraintRaw, \"A raw constraint was violated\"], [LangErrorCode.ConstraintOwner, \"An owner constraint was violated\"], [LangErrorCode.ConstraintRentExempt, \"A rent exempt constraint was violated\"], [LangErrorCode.ConstraintSeeds, \"A seeds constraint was violated\"], [LangErrorCode.ConstraintExecutable, \"An executable constraint was violated\"], [LangErrorCode.ConstraintState, \"A state constraint was violated\"], [LangErrorCode.ConstraintAssociated, \"An associated constraint was violated\"], [LangErrorCode.ConstraintAssociatedInit, \"An associated init constraint was violated\"], [LangErrorCode.ConstraintClose, \"A close constraint was violated\"], [LangErrorCode.ConstraintAddress, \"An address constraint was violated\"], // Accounts.\n[LangErrorCode.AccountDiscriminatorAlreadySet, \"The account discriminator was already set on this account\"], [LangErrorCode.AccountDiscriminatorNotFound, \"No 8 byte discriminator was found on the account\"], [LangErrorCode.AccountDiscriminatorMismatch, \"8 byte discriminator did not match what was expected\"], [LangErrorCode.AccountDidNotDeserialize, \"Failed to deserialize the account\"], [LangErrorCode.AccountDidNotSerialize, \"Failed to serialize the account\"], [LangErrorCode.AccountNotEnoughKeys, \"Not enough account keys given to the instruction\"], [LangErrorCode.AccountNotMutable, \"The given account is not mutable\"], [LangErrorCode.AccountNotProgramOwned, \"The given account is not owned by the executing program\"], [LangErrorCode.InvalidProgramId, \"Program ID was not as expected\"], [LangErrorCode.InvalidProgramIdExecutable, \"Program account is not executable\"], // State.\n[LangErrorCode.StateInvalidAddress, \"The given state account does not have the correct address\"], // Misc.\n[LangErrorCode.Deprecated, \"The API being used is deprecated and should no longer be used\"]]);","map":{"version":3,"sources":["../../src/error.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export class IdlError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"IdlError\";\n    }\n}\n// An error from a user defined program.\nexport class ProgramError extends Error {\n    constructor(code, msg, ...params) {\n        super(...params);\n        this.code = code;\n        this.msg = msg;\n    }\n    static parse(err, idlErrors) {\n        // TODO: don't rely on the error string. web3.js should preserve the error\n        //       code information instead of giving us an untyped string.\n        let components = err.toString().split(\"custom program error: \");\n        if (components.length !== 2) {\n            return null;\n        }\n        let errorCode;\n        try {\n            errorCode = parseInt(components[1]);\n        }\n        catch (parseErr) {\n            return null;\n        }\n        // Parse user error.\n        let errorMsg = idlErrors.get(errorCode);\n        if (errorMsg !== undefined) {\n            return new ProgramError(errorCode, errorMsg, errorCode + \": \" + errorMsg);\n        }\n        // Parse framework internal error.\n        errorMsg = LangErrorMessage.get(errorCode);\n        if (errorMsg !== undefined) {\n            return new ProgramError(errorCode, errorMsg, errorCode + \": \" + errorMsg);\n        }\n        // Unable to parse the error. Just return the untranslated error.\n        return null;\n    }\n    toString() {\n        return this.msg;\n    }\n}\nconst LangErrorCode = {\n    // Instructions.\n    InstructionMissing: 100,\n    InstructionFallbackNotFound: 101,\n    InstructionDidNotDeserialize: 102,\n    InstructionDidNotSerialize: 103,\n    // IDL instructions.\n    IdlInstructionStub: 120,\n    IdlInstructionInvalidProgram: 121,\n    // Constraints.\n    ConstraintMut: 140,\n    ConstraintHasOne: 141,\n    ConstraintSigner: 142,\n    ConstraintRaw: 143,\n    ConstraintOwner: 144,\n    ConstraintRentExempt: 145,\n    ConstraintSeeds: 146,\n    ConstraintExecutable: 147,\n    ConstraintState: 148,\n    ConstraintAssociated: 149,\n    ConstraintAssociatedInit: 150,\n    ConstraintClose: 151,\n    ConstraintAddress: 152,\n    // Accounts.\n    AccountDiscriminatorAlreadySet: 160,\n    AccountDiscriminatorNotFound: 161,\n    AccountDiscriminatorMismatch: 162,\n    AccountDidNotDeserialize: 163,\n    AccountDidNotSerialize: 164,\n    AccountNotEnoughKeys: 165,\n    AccountNotMutable: 166,\n    AccountNotProgramOwned: 167,\n    InvalidProgramId: 168,\n    InvalidProgramIdExecutable: 169,\n    // State.\n    StateInvalidAddress: 180,\n    // Used for APIs that shouldn't be used anymore.\n    Deprecated: 299,\n};\nconst LangErrorMessage = new Map([\n    // Instructions.\n    [\n        LangErrorCode.InstructionMissing,\n        \"8 byte instruction identifier not provided\",\n    ],\n    [\n        LangErrorCode.InstructionFallbackNotFound,\n        \"Fallback functions are not supported\",\n    ],\n    [\n        LangErrorCode.InstructionDidNotDeserialize,\n        \"The program could not deserialize the given instruction\",\n    ],\n    [\n        LangErrorCode.InstructionDidNotSerialize,\n        \"The program could not serialize the given instruction\",\n    ],\n    // Idl instructions.\n    [\n        LangErrorCode.IdlInstructionStub,\n        \"The program was compiled without idl instructions\",\n    ],\n    [\n        LangErrorCode.IdlInstructionInvalidProgram,\n        \"The transaction was given an invalid program for the IDL instruction\",\n    ],\n    // Constraints.\n    [LangErrorCode.ConstraintMut, \"A mut constraint was violated\"],\n    [LangErrorCode.ConstraintHasOne, \"A has_one constraint was violated\"],\n    [LangErrorCode.ConstraintSigner, \"A signer constraint was violated\"],\n    [LangErrorCode.ConstraintRaw, \"A raw constraint was violated\"],\n    [LangErrorCode.ConstraintOwner, \"An owner constraint was violated\"],\n    [LangErrorCode.ConstraintRentExempt, \"A rent exempt constraint was violated\"],\n    [LangErrorCode.ConstraintSeeds, \"A seeds constraint was violated\"],\n    [LangErrorCode.ConstraintExecutable, \"An executable constraint was violated\"],\n    [LangErrorCode.ConstraintState, \"A state constraint was violated\"],\n    [LangErrorCode.ConstraintAssociated, \"An associated constraint was violated\"],\n    [\n        LangErrorCode.ConstraintAssociatedInit,\n        \"An associated init constraint was violated\",\n    ],\n    [LangErrorCode.ConstraintClose, \"A close constraint was violated\"],\n    [LangErrorCode.ConstraintAddress, \"An address constraint was violated\"],\n    // Accounts.\n    [\n        LangErrorCode.AccountDiscriminatorAlreadySet,\n        \"The account discriminator was already set on this account\",\n    ],\n    [\n        LangErrorCode.AccountDiscriminatorNotFound,\n        \"No 8 byte discriminator was found on the account\",\n    ],\n    [\n        LangErrorCode.AccountDiscriminatorMismatch,\n        \"8 byte discriminator did not match what was expected\",\n    ],\n    [LangErrorCode.AccountDidNotDeserialize, \"Failed to deserialize the account\"],\n    [LangErrorCode.AccountDidNotSerialize, \"Failed to serialize the account\"],\n    [\n        LangErrorCode.AccountNotEnoughKeys,\n        \"Not enough account keys given to the instruction\",\n    ],\n    [LangErrorCode.AccountNotMutable, \"The given account is not mutable\"],\n    [\n        LangErrorCode.AccountNotProgramOwned,\n        \"The given account is not owned by the executing program\",\n    ],\n    [LangErrorCode.InvalidProgramId, \"Program ID was not as expected\"],\n    [\n        LangErrorCode.InvalidProgramIdExecutable,\n        \"Program account is not executable\",\n    ],\n    // State.\n    [\n        LangErrorCode.StateInvalidAddress,\n        \"The given state account does not have the correct address\",\n    ],\n    // Misc.\n    [\n        LangErrorCode.Deprecated,\n        \"The API being used is deprecated and should no longer be used\",\n    ],\n]);\n//# sourceMappingURL=error.js.map"]},"metadata":{},"sourceType":"module"}