{"ast":null,"code":"var _jsxFileName = \"/home/jet/Documents/buildspace/gif-portal-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor'; // Constants\n// SystemProgram is a reference to the Solana runtime!\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram,\n  Keypair\n} = web3; // Create a keypair for the account that will hold the GIF data.\n\nlet baseAccount = Keypair.generate(); // Get our program's id form the IDL file.\n\nconst programID = new PublicKey(idl.metadata.address); // Set our network to devent.\n\nconst network = clusterApiUrl('devnet'); // Control's how we want to acknowledge when a trasnaction is \"done\".\n\nconst opts = {\n  preflightCommitment: \"processed\"\n}; // TEST GIFS\n\nconst TEST_GIFS = ['https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp', 'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g', 'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g', 'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp']; // buildspace twitter stuff\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]); // Is phantom wallet connected?\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom Wallet is found!');\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log('Connected with PubKey:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        } else {\n          alert('Solana obj is not found - get Phantom Wallet');\n        }\n      }\n    } catch (err) {\n      console.log('err');\n    }\n  }; // Connect Wallet Logic\n\n\n  const connectWallet = async () => {\n    // Render UI when user wallet is not connected\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with pubKey:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  }; // Send Gif from valid link to our grid\n\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link supplied:', inputValue);\n    } else {\n      console.log('Empty input value - try again.');\n    }\n  }; // Get Input Change\n\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  }; // Call Initialize\n\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log('ping');\n      await program.rpc.initialize({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId\n        },\n        signers: [baseAccount]\n      });\n      console.log('Created a new BaseAccount w/ address:', baseAccount.publicKey.toString());\n      await getGifList();\n    } catch (err) {\n      console.log('Error creating BaseAccount account:', err);\n    }\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect Wallet!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => {\n    // Program Account Not init\n    if (gifList === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: createGifAccount,\n          children: \"One Time Init for GIF Program Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this);\n    } else {\n      // Account exists and user can submit gifs\n\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        className: \"connected-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter gif link here!\",\n          value: inputValue,\n          onChange: onInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button submit-gif-button\",\n          onClick: sendGif,\n          children: \"Submit Gif!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gif-grid\",\n          children: gifList.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"gif-item\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: item.gifLink\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }, this);\n    }\n  }; // get gif list\n\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      console.log('Account retrieved', account);\n      setGifList(account.gifList);\n    } catch (err) {\n      console.log('getGifs error: ', err);\n      setGifList(null);\n    }\n  }; // Check for connected wallet\n\n\n  useEffect(() => {\n    window.addEventListener('load', async event => {\n      await checkIfWalletIsConnected();\n    });\n  }, []); // Fetch gif list from connected wallet\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching Gif List...'); // Call solana program && set state\n\n      getGifList();\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC jetgoof's portal to Solana\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Jump into your metaverse gif library \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"GUp0OLdI+EDuCRRqm+ZLCxBP30A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/jet/Documents/buildspace/gif-portal-starter/src/App.js"],"names":["useEffect","useState","idl","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","SystemProgram","Keypair","baseAccount","generate","programID","metadata","address","network","opts","preflightCommitment","TEST_GIFS","TWITTER_HANDLE","TWITTER_LINK","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","alert","err","connectWallet","sendGif","length","onInputChange","event","value","target","getProvider","connection","provider","createGifAccount","program","rpc","initialize","accounts","user","wallet","systemProgram","programId","signers","getGifList","renderNotConnectedContainer","renderConnectedContainer","map","item","index","gifLink","account","fetch","addEventListener","twitterLogo"],"mappings":"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","sourcesContent":["import twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport {useEffect, useState} from 'react';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\n\n// Constants\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nlet baseAccount = Keypair.generate();\n\n// Get our program's id form the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devent.\nconst network = clusterApiUrl('devnet');\n\n// Control's how we want to acknowledge when a trasnaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// TEST GIFS\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\n// buildspace twitter stuff\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n  // Is phantom wallet connected?\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {solana} = window;\n\n      if(solana) {\n        if(solana.isPhantom) {\n          console.log('Phantom Wallet is found!');\n          const response = await solana.connect({onlyIfTrusted: true});\n          console.log('Connected with PubKey:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        } else {\n          alert('Solana obj is not found - get Phantom Wallet');\n        }\n      }\n    } catch (err) {\n      console.log('err');\n    }\n  };\n\n  // Connect Wallet Logic\n  const connectWallet = async () => {\n    // Render UI when user wallet is not connected\n    const {solana} = window;\n\n    if(solana) {\n      const response = await solana.connect();\n      console.log('Connected with pubKey:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  // Send Gif from valid link to our grid\n  const sendGif = async () => {\n    if(inputValue.length > 0) {\n      console.log('Gif link supplied:', inputValue);\n    } else {\n      console.log('Empty input value - try again.');\n    }\n  };\n\n  // Get Input Change\n  const onInputChange = (event) => {\n    const {value} = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  // Call Initialize\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log('ping')\n      await program.rpc.initialize({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log('Created a new BaseAccount w/ address:', baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(err) {\n      console.log('Error creating BaseAccount account:', err)\n    }\n  }\n  \n  const renderNotConnectedContainer = () => (\n    <button\n      className='cta-button connect-wallet-button'\n      onClick={connectWallet}\n    >\n      Connect Wallet!\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // Program Account Not init\n    if(gifList === null) {\n      return (\n        <div className='connected-container'>\n          <button className='cta-button submit-gif-button' onClick={createGifAccount}>One Time Init for GIF Program Account</button>\n        </div>\n      )\n    }\n    else {\n      // Account exists and user can submit gifs\n      <div className='connected-container'>\n        <input type='text' placeholder='Enter gif link here!' value={inputValue} onChange={onInputChange}/>\n        <button className='cta-button submit-gif-button' onClick={sendGif}>Submit Gif!</button>\n        <div className='gif-grid'>\n          {gifList.map((item, index) => (\n            <div className='gif-item' key={index}>\n              <img src={item.gifLink} />\n            </div>\n          ))}\n        </div>\n      </div>\n    }\n  };\n\n  // get gif list\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log('Account retrieved', account)\n      setGifList(account.gifList)\n  \n    } catch (err) {\n      console.log('getGifs error: ', err)\n      setGifList(null);\n    }\n  }\n\n  // Check for connected wallet\n  useEffect(() => {\n    window.addEventListener('load', async (event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  // Fetch gif list from connected wallet\n  useEffect(() => {\n    if(walletAddress) {\n      console.log('Fetching Gif List...');\n      // Call solana program && set state\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">🖼 jetgoof's portal to Solana</p>\n          <p className=\"sub-text\">\n            Jump into your metaverse gif library ✨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}