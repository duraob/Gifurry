{"ast":null,"code":"import _regeneratorRuntime from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport * as borsh from \"@project-serum/borsh\"; // Deterministic IDL address as a function of the program id.\n\nexport function idlAddress(_x) {\n  return _idlAddress.apply(this, arguments);\n} // Seed for generating the idlAddress.\n\nfunction _idlAddress() {\n  _idlAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(programId) {\n    var base;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return PublicKey.findProgramAddress([], programId);\n\n          case 2:\n            base = _context.sent[0];\n            _context.next = 5;\n            return PublicKey.createWithSeed(base, seed(), programId);\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _idlAddress.apply(this, arguments);\n}\n\nexport function seed() {\n  return \"anchor:idl\";\n}\nvar IDL_ACCOUNT_LAYOUT = borsh.struct([borsh.publicKey(\"authority\"), borsh.vecU8(\"data\")]);\nexport function decodeIdlAccount(data) {\n  return IDL_ACCOUNT_LAYOUT.decode(data);\n}\nexport function encodeIdlAccount(acc) {\n  var buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n  var len = IDL_ACCOUNT_LAYOUT.encode(acc, buffer);\n  return buffer.slice(0, len);\n}","map":{"version":3,"sources":["../../src/idl.ts"],"names":[],"mappings":";;AAAA,SAAS,SAAT,QAA0B,iBAA1B;AACA,OAAO,KAAK,KAAZ,MAAuB,sBAAvB,C,CAiIA;;AACA,gBAAsB,UAAtB;AAAA;AAAA,C,CAKA;;;yEALO,iBAA0B,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACe,SAAS,CAAC,kBAAV,CAA6B,EAA7B,EAAiC,SAAjC,CADf;;AAAA;AACC,YAAA,IADD,iBAC4D,CAD5D;AAAA;AAAA,mBAEQ,SAAS,CAAC,cAAV,CAAyB,IAAzB,EAA+B,IAAI,EAAnC,EAAuC,SAAvC,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAMP,OAAM,SAAU,IAAV,GAAc;AAClB,SAAO,YAAP;AACD;AAQD,IAAM,kBAAkB,GAAoC,KAAK,CAAC,MAAN,CAAa,CACvE,KAAK,CAAC,SAAN,CAAgB,WAAhB,CADuE,EAEvE,KAAK,CAAC,KAAN,CAAY,MAAZ,CAFuE,CAAb,CAA5D;AAKA,OAAM,SAAU,gBAAV,CAA2B,IAA3B,EAAuC;AAC3C,SAAO,kBAAkB,CAAC,MAAnB,CAA0B,IAA1B,CAAP;AACD;AAED,OAAM,SAAU,gBAAV,CAA2B,GAA3B,EAAiD;AACrD,MAAM,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,IAAb,CAAf,CADqD,CAClB;;AACnC,MAAM,GAAG,GAAG,kBAAkB,CAAC,MAAnB,CAA0B,GAA1B,EAA+B,MAA/B,CAAZ;AACA,SAAO,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,GAAhB,CAAP;AACD","sourceRoot":"","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport * as borsh from \"@project-serum/borsh\";\n// Deterministic IDL address as a function of the program id.\nexport async function idlAddress(programId) {\n    const base = (await PublicKey.findProgramAddress([], programId))[0];\n    return await PublicKey.createWithSeed(base, seed(), programId);\n}\n// Seed for generating the idlAddress.\nexport function seed() {\n    return \"anchor:idl\";\n}\nconst IDL_ACCOUNT_LAYOUT = borsh.struct([\n    borsh.publicKey(\"authority\"),\n    borsh.vecU8(\"data\"),\n]);\nexport function decodeIdlAccount(data) {\n    return IDL_ACCOUNT_LAYOUT.decode(data);\n}\nexport function encodeIdlAccount(acc) {\n    const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n    const len = IDL_ACCOUNT_LAYOUT.encode(acc, buffer);\n    return buffer.slice(0, len);\n}\n//# sourceMappingURL=idl.js.map"]},"metadata":{},"sourceType":"module"}