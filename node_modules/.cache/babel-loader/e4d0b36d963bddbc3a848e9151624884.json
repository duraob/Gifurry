{"ast":null,"code":"import _classCallCheck from \"/home/jet/Documents/buildspace/Gifurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jet/Documents/buildspace/Gifurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport camelCase from \"camelcase\";\nimport * as borsh from \"@project-serum/borsh\";\nimport { IdlError } from \"../error\";\nexport var IdlCoder = /*#__PURE__*/function () {\n  function IdlCoder() {\n    _classCallCheck(this, IdlCoder);\n  }\n\n  _createClass(IdlCoder, null, [{\n    key: \"fieldLayout\",\n    value: function fieldLayout(field, types) {\n      var fieldName = field.name !== undefined ? camelCase(field.name) : undefined;\n\n      switch (field.type) {\n        case \"bool\":\n          {\n            return borsh.bool(fieldName);\n          }\n\n        case \"u8\":\n          {\n            return borsh.u8(fieldName);\n          }\n\n        case \"i8\":\n          {\n            return borsh.i8(fieldName);\n          }\n\n        case \"u16\":\n          {\n            return borsh.u16(fieldName);\n          }\n\n        case \"i16\":\n          {\n            return borsh.i16(fieldName);\n          }\n\n        case \"u32\":\n          {\n            return borsh.u32(fieldName);\n          }\n\n        case \"i32\":\n          {\n            return borsh.i32(fieldName);\n          }\n\n        case \"u64\":\n          {\n            return borsh.u64(fieldName);\n          }\n\n        case \"i64\":\n          {\n            return borsh.i64(fieldName);\n          }\n\n        case \"u128\":\n          {\n            return borsh.u128(fieldName);\n          }\n\n        case \"i128\":\n          {\n            return borsh.i128(fieldName);\n          }\n\n        case \"bytes\":\n          {\n            return borsh.vecU8(fieldName);\n          }\n\n        case \"string\":\n          {\n            return borsh.str(fieldName);\n          }\n\n        case \"publicKey\":\n          {\n            return borsh.publicKey(fieldName);\n          }\n\n        default:\n          {\n            if (\"vec\" in field.type) {\n              return borsh.vec(IdlCoder.fieldLayout({\n                name: undefined,\n                // @ts-ignore\n                type: field.type.vec\n              }, types), fieldName);\n            } else if (\"option\" in field.type) {\n              return borsh.option(IdlCoder.fieldLayout({\n                name: undefined,\n                type: field.type.option\n              }, types), fieldName);\n            } else if (\"defined\" in field.type) {\n              var defined = field.type.defined; // User defined type.\n\n              if (types === undefined) {\n                throw new IdlError(\"User defined types not provided\");\n              }\n\n              var filtered = types.filter(function (t) {\n                return t.name === defined;\n              });\n\n              if (filtered.length !== 1) {\n                throw new IdlError(\"Type not found: \".concat(JSON.stringify(field)));\n              }\n\n              return IdlCoder.typeDefLayout(filtered[0], types, fieldName);\n            } else if (\"array\" in field.type) {\n              var arrayTy = field.type.array[0];\n              var arrayLen = field.type.array[1];\n              var innerLayout = IdlCoder.fieldLayout({\n                name: undefined,\n                type: arrayTy\n              }, types);\n              return borsh.array(innerLayout, arrayLen, fieldName);\n            } else {\n              throw new Error(\"Not yet implemented: \".concat(field));\n            }\n          }\n      }\n    }\n  }, {\n    key: \"typeDefLayout\",\n    value: function typeDefLayout(typeDef) {\n      var types = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var name = arguments.length > 2 ? arguments[2] : undefined;\n\n      if (typeDef.type.kind === \"struct\") {\n        var fieldLayouts = typeDef.type.fields.map(function (field) {\n          var x = IdlCoder.fieldLayout(field, types);\n          return x;\n        });\n        return borsh.struct(fieldLayouts, name);\n      } else if (typeDef.type.kind === \"enum\") {\n        var variants = typeDef.type.variants.map(function (variant) {\n          var name = camelCase(variant.name);\n\n          if (variant.fields === undefined) {\n            return borsh.struct([], name);\n          } // @ts-ignore\n\n\n          var fieldLayouts = variant.fields.map(function (f) {\n            // @ts-ignore\n            if (f.name === undefined) {\n              throw new Error(\"Tuple enum variants not yet implemented.\");\n            } // @ts-ignore\n\n\n            return IdlCoder.fieldLayout(f, types);\n          });\n          return borsh.struct(fieldLayouts, name);\n        });\n\n        if (name !== undefined) {\n          // Buffer-layout lib requires the name to be null (on construction)\n          // when used as a field.\n          return borsh.rustEnum(variants).replicate(name);\n        }\n\n        return borsh.rustEnum(variants, name);\n      } else {\n        throw new Error(\"Unknown type kint: \".concat(typeDef));\n      }\n    }\n  }]);\n\n  return IdlCoder;\n}();","map":{"version":3,"sources":["../../../src/coder/idl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import camelCase from \"camelcase\";\nimport * as borsh from \"@project-serum/borsh\";\nimport { IdlError } from \"../error\";\nexport class IdlCoder {\n    static fieldLayout(field, types) {\n        const fieldName = field.name !== undefined ? camelCase(field.name) : undefined;\n        switch (field.type) {\n            case \"bool\": {\n                return borsh.bool(fieldName);\n            }\n            case \"u8\": {\n                return borsh.u8(fieldName);\n            }\n            case \"i8\": {\n                return borsh.i8(fieldName);\n            }\n            case \"u16\": {\n                return borsh.u16(fieldName);\n            }\n            case \"i16\": {\n                return borsh.i16(fieldName);\n            }\n            case \"u32\": {\n                return borsh.u32(fieldName);\n            }\n            case \"i32\": {\n                return borsh.i32(fieldName);\n            }\n            case \"u64\": {\n                return borsh.u64(fieldName);\n            }\n            case \"i64\": {\n                return borsh.i64(fieldName);\n            }\n            case \"u128\": {\n                return borsh.u128(fieldName);\n            }\n            case \"i128\": {\n                return borsh.i128(fieldName);\n            }\n            case \"bytes\": {\n                return borsh.vecU8(fieldName);\n            }\n            case \"string\": {\n                return borsh.str(fieldName);\n            }\n            case \"publicKey\": {\n                return borsh.publicKey(fieldName);\n            }\n            default: {\n                if (\"vec\" in field.type) {\n                    return borsh.vec(IdlCoder.fieldLayout({\n                        name: undefined,\n                        // @ts-ignore\n                        type: field.type.vec,\n                    }, types), fieldName);\n                }\n                else if (\"option\" in field.type) {\n                    return borsh.option(IdlCoder.fieldLayout({\n                        name: undefined,\n                        type: field.type.option,\n                    }, types), fieldName);\n                }\n                else if (\"defined\" in field.type) {\n                    const defined = field.type.defined;\n                    // User defined type.\n                    if (types === undefined) {\n                        throw new IdlError(\"User defined types not provided\");\n                    }\n                    const filtered = types.filter((t) => t.name === defined);\n                    if (filtered.length !== 1) {\n                        throw new IdlError(`Type not found: ${JSON.stringify(field)}`);\n                    }\n                    return IdlCoder.typeDefLayout(filtered[0], types, fieldName);\n                }\n                else if (\"array\" in field.type) {\n                    let arrayTy = field.type.array[0];\n                    let arrayLen = field.type.array[1];\n                    let innerLayout = IdlCoder.fieldLayout({\n                        name: undefined,\n                        type: arrayTy,\n                    }, types);\n                    return borsh.array(innerLayout, arrayLen, fieldName);\n                }\n                else {\n                    throw new Error(`Not yet implemented: ${field}`);\n                }\n            }\n        }\n    }\n    static typeDefLayout(typeDef, types = [], name) {\n        if (typeDef.type.kind === \"struct\") {\n            const fieldLayouts = typeDef.type.fields.map((field) => {\n                const x = IdlCoder.fieldLayout(field, types);\n                return x;\n            });\n            return borsh.struct(fieldLayouts, name);\n        }\n        else if (typeDef.type.kind === \"enum\") {\n            let variants = typeDef.type.variants.map((variant) => {\n                const name = camelCase(variant.name);\n                if (variant.fields === undefined) {\n                    return borsh.struct([], name);\n                }\n                // @ts-ignore\n                const fieldLayouts = variant.fields.map((f) => {\n                    // @ts-ignore\n                    if (f.name === undefined) {\n                        throw new Error(\"Tuple enum variants not yet implemented.\");\n                    }\n                    // @ts-ignore\n                    return IdlCoder.fieldLayout(f, types);\n                });\n                return borsh.struct(fieldLayouts, name);\n            });\n            if (name !== undefined) {\n                // Buffer-layout lib requires the name to be null (on construction)\n                // when used as a field.\n                return borsh.rustEnum(variants).replicate(name);\n            }\n            return borsh.rustEnum(variants, name);\n        }\n        else {\n            throw new Error(`Unknown type kint: ${typeDef}`);\n        }\n    }\n}\n//# sourceMappingURL=idl.js.map"]},"metadata":{},"sourceType":"module"}