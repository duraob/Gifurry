{"ast":null,"code":"import _classCallCheck from \"/home/jet/Documents/buildspace/Gifurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jet/Documents/buildspace/Gifurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport camelCase from \"camelcase\";\nimport StateFactory from \"./state\";\nimport InstructionFactory from \"./instruction\";\nimport TransactionFactory from \"./transaction\";\nimport RpcFactory from \"./rpc\";\nimport AccountFactory from \"./account\";\nimport SimulateFactory from \"./simulate\";\nimport { parseIdlErrors } from \"../common\"; // Re-exports.\n\nexport { StateClient } from \"./state\";\nexport { AccountClient } from \"./account\";\n\nvar NamespaceFactory = /*#__PURE__*/function () {\n  function NamespaceFactory() {\n    _classCallCheck(this, NamespaceFactory);\n  }\n\n  _createClass(NamespaceFactory, null, [{\n    key: \"build\",\n    value:\n    /**\n     * Generates all namespaces for a given program.\n     */\n    function build(idl, coder, programId, provider) {\n      var rpc = {};\n      var instruction = {};\n      var transaction = {};\n      var simulate = {};\n      var idlErrors = parseIdlErrors(idl);\n      var state = StateFactory.build(idl, coder, programId, provider);\n      idl.instructions.forEach(function (idlIx) {\n        var ixItem = InstructionFactory.build(idlIx, function (ixName, ix) {\n          return coder.instruction.encode(ixName, ix);\n        }, programId);\n        var txItem = TransactionFactory.build(idlIx, ixItem);\n        var rpcItem = RpcFactory.build(idlIx, txItem, idlErrors, provider);\n        var simulateItem = SimulateFactory.build(idlIx, txItem, idlErrors, provider, coder, programId, idl);\n        var name = camelCase(idlIx.name);\n        instruction[name] = ixItem;\n        transaction[name] = txItem;\n        rpc[name] = rpcItem;\n        simulate[name] = simulateItem;\n      });\n      var account = idl.accounts ? AccountFactory.build(idl, coder, programId, provider) : {};\n      return [rpc, instruction, transaction, account, simulate, state];\n    }\n  }]);\n\n  return NamespaceFactory;\n}();\n\nexport { NamespaceFactory as default };","map":{"version":3,"sources":["../../../../src/program/namespace/index.ts"],"names":[],"mappings":";;AAAA,OAAO,SAAP,MAAsB,WAAtB;AAKA,OAAO,YAAP,MAA0C,SAA1C;AACA,OAAO,kBAAP,MAAyD,eAAzD;AACA,OAAO,kBAAP,MAAyD,eAAzD;AACA,OAAO,UAAP,MAAyC,OAAzC;AACA,OAAO,cAAP,MAAiD,WAAjD;AACA,OAAO,eAAP,MAAmD,YAAnD;AACA,SAAS,cAAT,QAA+B,WAA/B,C,CAGA;;AACA,SAAS,WAAT,QAA4B,SAA5B;AAIA,SAA2B,aAA3B,QAAgE,WAAhE;;IAIqB,gB;;;;;;;;AACnB;;AAEG;AACI,mBACL,GADK,EAEL,KAFK,EAGL,SAHK,EAIL,QAJK,EAIa;AASlB,UAAM,GAAG,GAAiB,EAA1B;AACA,UAAM,WAAW,GAAyB,EAA1C;AACA,UAAM,WAAW,GAAyB,EAA1C;AACA,UAAM,QAAQ,GAAsB,EAApC;AAEA,UAAM,SAAS,GAAG,cAAc,CAAC,GAAD,CAAhC;AAEA,UAAM,KAAK,GAAG,YAAY,CAAC,KAAb,CAAmB,GAAnB,EAAwB,KAAxB,EAA+B,SAA/B,EAA0C,QAA1C,CAAd;AAEA,MAAA,GAAG,CAAC,YAAJ,CAAiB,OAAjB,CAAyB,UAAiC,KAAjC,EAA6C;AACpE,YAAM,MAAM,GAAG,kBAAkB,CAAC,KAAnB,CACb,KADa,EAEb,UAAC,MAAD,EAAS,EAAT;AAAA,iBAAgB,KAAK,CAAC,WAAN,CAAkB,MAAlB,CAAyB,MAAzB,EAAiC,EAAjC,CAAhB;AAAA,SAFa,EAGb,SAHa,CAAf;AAKA,YAAM,MAAM,GAAG,kBAAkB,CAAC,KAAnB,CAAyB,KAAzB,EAAgC,MAAhC,CAAf;AACA,YAAM,OAAO,GAAG,UAAU,CAAC,KAAX,CAAiB,KAAjB,EAAwB,MAAxB,EAAgC,SAAhC,EAA2C,QAA3C,CAAhB;AACA,YAAM,YAAY,GAAG,eAAe,CAAC,KAAhB,CACnB,KADmB,EAEnB,MAFmB,EAGnB,SAHmB,EAInB,QAJmB,EAKnB,KALmB,EAMnB,SANmB,EAOnB,GAPmB,CAArB;AAUA,YAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,IAAP,CAAtB;AAEA,QAAA,WAAW,CAAC,IAAD,CAAX,GAAoB,MAApB;AACA,QAAA,WAAW,CAAC,IAAD,CAAX,GAAoB,MAApB;AACA,QAAA,GAAG,CAAC,IAAD,CAAH,GAAY,OAAZ;AACA,QAAA,QAAQ,CAAC,IAAD,CAAR,GAAiB,YAAjB;AACD,OAxBD;AA0BA,UAAM,OAAO,GAA0B,GAAG,CAAC,QAAJ,GACnC,cAAc,CAAC,KAAf,CAAqB,GAArB,EAA0B,KAA1B,EAAiC,SAAjC,EAA4C,QAA5C,CADmC,GAElC,EAFL;AAIA,aAAO,CACL,GADK,EAEL,WAFK,EAGL,WAHK,EAIL,OAJK,EAKL,QALK,EAML,KANK,CAAP;AAQD;;;;;;SAhEkB,gB","sourceRoot":"","sourcesContent":["import camelCase from \"camelcase\";\nimport StateFactory from \"./state\";\nimport InstructionFactory from \"./instruction\";\nimport TransactionFactory from \"./transaction\";\nimport RpcFactory from \"./rpc\";\nimport AccountFactory from \"./account\";\nimport SimulateFactory from \"./simulate\";\nimport { parseIdlErrors } from \"../common\";\n// Re-exports.\nexport { StateClient } from \"./state\";\nexport { AccountClient } from \"./account\";\nexport default class NamespaceFactory {\n    /**\n     * Generates all namespaces for a given program.\n     */\n    static build(idl, coder, programId, provider) {\n        const rpc = {};\n        const instruction = {};\n        const transaction = {};\n        const simulate = {};\n        const idlErrors = parseIdlErrors(idl);\n        const state = StateFactory.build(idl, coder, programId, provider);\n        idl.instructions.forEach((idlIx) => {\n            const ixItem = InstructionFactory.build(idlIx, (ixName, ix) => coder.instruction.encode(ixName, ix), programId);\n            const txItem = TransactionFactory.build(idlIx, ixItem);\n            const rpcItem = RpcFactory.build(idlIx, txItem, idlErrors, provider);\n            const simulateItem = SimulateFactory.build(idlIx, txItem, idlErrors, provider, coder, programId, idl);\n            const name = camelCase(idlIx.name);\n            instruction[name] = ixItem;\n            transaction[name] = txItem;\n            rpc[name] = rpcItem;\n            simulate[name] = simulateItem;\n        });\n        const account = idl.accounts\n            ? AccountFactory.build(idl, coder, programId, provider)\n            : {};\n        return [\n            rpc,\n            instruction,\n            transaction,\n            account,\n            simulate,\n            state,\n        ];\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}