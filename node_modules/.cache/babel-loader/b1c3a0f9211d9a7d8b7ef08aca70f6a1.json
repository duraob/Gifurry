{"ast":null,"code":"import { IdlCoder } from \"./idl\";\nimport { sha256 } from \"js-sha256\";\n/**\n * Number of bytes of the account discriminator.\n */\n\nexport const ACCOUNT_DISCRIMINATOR_SIZE = 8;\n/**\n * Encodes and decodes account objects.\n */\n\nexport class AccountsCoder {\n  constructor(idl) {\n    if (idl.accounts === undefined) {\n      this.accountLayouts = new Map();\n      return;\n    }\n\n    const layouts = idl.accounts.map(acc => {\n      return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n    });\n    this.accountLayouts = new Map(layouts);\n  }\n\n  async encode(accountName, account) {\n    const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n    const layout = this.accountLayouts.get(accountName);\n\n    if (!layout) {\n      throw new Error(`Unknown account: ${accountName}`);\n    }\n\n    const len = layout.encode(account, buffer);\n    let accountData = buffer.slice(0, len);\n    let discriminator = AccountsCoder.accountDiscriminator(accountName);\n    return Buffer.concat([discriminator, accountData]);\n  }\n\n  decode(accountName, ix) {\n    // Chop off the discriminator before decoding.\n    const data = ix.slice(8);\n    const layout = this.accountLayouts.get(accountName);\n\n    if (!layout) {\n      throw new Error(`Unknown account: ${accountName}`);\n    }\n\n    return layout.decode(data);\n  }\n  /**\n   * Calculates and returns a unique 8 byte discriminator prepended to all anchor accounts.\n   *\n   * @param name The name of the account to calculate the discriminator.\n   */\n\n\n  static accountDiscriminator(name) {\n    return Buffer.from(sha256.digest(`account:${name}`)).slice(0, 8);\n  }\n\n}","map":{"version":3,"sources":["../../../src/coder/accounts.ts"],"names":[],"mappings":"AAEA,SAAS,QAAT,QAAyB,OAAzB;AACA,SAAS,MAAT,QAAuB,WAAvB;AAEA;;AAEG;;AACH,OAAO,MAAM,0BAA0B,GAAG,CAAnC;AAEP;;AAEG;;AACH,OAAM,MAAO,aAAP,CAAoB;AAMxB,EAAA,WAAA,CAAmB,GAAnB,EAA2B;AACzB,QAAI,GAAG,CAAC,QAAJ,KAAiB,SAArB,EAAgC;AAC9B,WAAK,cAAL,GAAsB,IAAI,GAAJ,EAAtB;AACA;AACD;;AACD,UAAM,OAAO,GAAkB,GAAG,CAAC,QAAJ,CAAa,GAAb,CAAkB,GAAD,IAAQ;AACtD,aAAO,CAAC,GAAG,CAAC,IAAL,EAAgB,QAAQ,CAAC,aAAT,CAAuB,GAAvB,EAA4B,GAAG,CAAC,KAAhC,CAAhB,CAAP;AACD,KAF8B,CAA/B;AAIA,SAAK,cAAL,GAAsB,IAAI,GAAJ,CAAQ,OAAR,CAAtB;AACD;;AAEkB,QAAN,MAAM,CAAU,WAAV,EAA0B,OAA1B,EAAoC;AACrD,UAAM,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,IAAb,CAAf,CADqD,CAClB;;AACnC,UAAM,MAAM,GAAG,KAAK,cAAL,CAAoB,GAApB,CAAwB,WAAxB,CAAf;;AACA,QAAI,CAAC,MAAL,EAAa;AACX,YAAM,IAAI,KAAJ,CAAU,oBAAoB,WAAW,EAAzC,CAAN;AACD;;AACD,UAAM,GAAG,GAAG,MAAM,CAAC,MAAP,CAAc,OAAd,EAAuB,MAAvB,CAAZ;AACA,QAAI,WAAW,GAAG,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,GAAhB,CAAlB;AACA,QAAI,aAAa,GAAG,aAAa,CAAC,oBAAd,CAAmC,WAAnC,CAApB;AACA,WAAO,MAAM,CAAC,MAAP,CAAc,CAAC,aAAD,EAAgB,WAAhB,CAAd,CAAP;AACD;;AAEM,EAAA,MAAM,CAAU,WAAV,EAA0B,EAA1B,EAAoC;AAC/C;AACA,UAAM,IAAI,GAAG,EAAE,CAAC,KAAH,CAAS,CAAT,CAAb;AACA,UAAM,MAAM,GAAG,KAAK,cAAL,CAAoB,GAApB,CAAwB,WAAxB,CAAf;;AACA,QAAI,CAAC,MAAL,EAAa;AACX,YAAM,IAAI,KAAJ,CAAU,oBAAoB,WAAW,EAAzC,CAAN;AACD;;AACD,WAAO,MAAM,CAAC,MAAP,CAAc,IAAd,CAAP;AACD;AAED;;;;AAIG;;;AAC+B,SAApB,oBAAoB,CAAC,IAAD,EAAa;AAC7C,WAAO,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,MAAP,CAAc,WAAW,IAAI,EAA7B,CAAZ,EAA8C,KAA9C,CAAoD,CAApD,EAAuD,CAAvD,CAAP;AACD;;AA/CuB","sourceRoot":"","sourcesContent":["import { IdlCoder } from \"./idl\";\nimport { sha256 } from \"js-sha256\";\n/**\n * Number of bytes of the account discriminator.\n */\nexport const ACCOUNT_DISCRIMINATOR_SIZE = 8;\n/**\n * Encodes and decodes account objects.\n */\nexport class AccountsCoder {\n    constructor(idl) {\n        if (idl.accounts === undefined) {\n            this.accountLayouts = new Map();\n            return;\n        }\n        const layouts = idl.accounts.map((acc) => {\n            return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n        });\n        this.accountLayouts = new Map(layouts);\n    }\n    async encode(accountName, account) {\n        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n        const layout = this.accountLayouts.get(accountName);\n        if (!layout) {\n            throw new Error(`Unknown account: ${accountName}`);\n        }\n        const len = layout.encode(account, buffer);\n        let accountData = buffer.slice(0, len);\n        let discriminator = AccountsCoder.accountDiscriminator(accountName);\n        return Buffer.concat([discriminator, accountData]);\n    }\n    decode(accountName, ix) {\n        // Chop off the discriminator before decoding.\n        const data = ix.slice(8);\n        const layout = this.accountLayouts.get(accountName);\n        if (!layout) {\n            throw new Error(`Unknown account: ${accountName}`);\n        }\n        return layout.decode(data);\n    }\n    /**\n     * Calculates and returns a unique 8 byte discriminator prepended to all anchor accounts.\n     *\n     * @param name The name of the account to calculate the discriminator.\n     */\n    static accountDiscriminator(name) {\n        return Buffer.from(sha256.digest(`account:${name}`)).slice(0, 8);\n    }\n}\n//# sourceMappingURL=accounts.js.map"]},"metadata":{},"sourceType":"module"}