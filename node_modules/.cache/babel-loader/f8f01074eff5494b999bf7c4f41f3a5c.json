{"ast":null,"code":"import _regeneratorRuntime from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { IdlCoder } from \"./idl\";\nimport { sha256 } from \"js-sha256\";\n/**\n * Number of bytes of the account discriminator.\n */\n\nexport var ACCOUNT_DISCRIMINATOR_SIZE = 8;\n/**\n * Encodes and decodes account objects.\n */\n\nexport var AccountsCoder = /*#__PURE__*/function () {\n  function AccountsCoder(idl) {\n    _classCallCheck(this, AccountsCoder);\n\n    if (idl.accounts === undefined) {\n      this.accountLayouts = new Map();\n      return;\n    }\n\n    var layouts = idl.accounts.map(function (acc) {\n      return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n    });\n    this.accountLayouts = new Map(layouts);\n  }\n\n  _createClass(AccountsCoder, [{\n    key: \"encode\",\n    value: function () {\n      var _encode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(accountName, account) {\n        var buffer, layout, len, accountData, discriminator;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n                layout = this.accountLayouts.get(accountName);\n\n                if (layout) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Unknown account: \".concat(accountName));\n\n              case 4:\n                len = layout.encode(account, buffer);\n                accountData = buffer.slice(0, len);\n                discriminator = AccountsCoder.accountDiscriminator(accountName);\n                return _context.abrupt(\"return\", Buffer.concat([discriminator, accountData]));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function encode(_x, _x2) {\n        return _encode.apply(this, arguments);\n      }\n\n      return encode;\n    }()\n  }, {\n    key: \"decode\",\n    value: function decode(accountName, ix) {\n      // Chop off the discriminator before decoding.\n      var data = ix.slice(8);\n      var layout = this.accountLayouts.get(accountName);\n\n      if (!layout) {\n        throw new Error(\"Unknown account: \".concat(accountName));\n      }\n\n      return layout.decode(data);\n    }\n    /**\n     * Calculates and returns a unique 8 byte discriminator prepended to all anchor accounts.\n     *\n     * @param name The name of the account to calculate the discriminator.\n     */\n\n  }], [{\n    key: \"accountDiscriminator\",\n    value: function accountDiscriminator(name) {\n      return Buffer.from(sha256.digest(\"account:\".concat(name))).slice(0, 8);\n    }\n  }]);\n\n  return AccountsCoder;\n}();","map":{"version":3,"sources":["../../../src/coder/accounts.ts"],"names":[],"mappings":";;;;AAEA,SAAS,QAAT,QAAyB,OAAzB;AACA,SAAS,MAAT,QAAuB,WAAvB;AAEA;;AAEG;;AACH,OAAO,IAAM,0BAA0B,GAAG,CAAnC;AAEP;;AAEG;;AACH,WAAa,aAAb;AAME,yBAAmB,GAAnB,EAA2B;AAAA;;AACzB,QAAI,GAAG,CAAC,QAAJ,KAAiB,SAArB,EAAgC;AAC9B,WAAK,cAAL,GAAsB,IAAI,GAAJ,EAAtB;AACA;AACD;;AACD,QAAM,OAAO,GAAkB,GAAG,CAAC,QAAJ,CAAa,GAAb,CAAiB,UAAC,GAAD,EAAQ;AACtD,aAAO,CAAC,GAAG,CAAC,IAAL,EAAgB,QAAQ,CAAC,aAAT,CAAuB,GAAvB,EAA4B,GAAG,CAAC,KAAhC,CAAhB,CAAP;AACD,KAF8B,CAA/B;AAIA,SAAK,cAAL,GAAsB,IAAI,GAAJ,CAAQ,OAAR,CAAtB;AACD;;AAhBH;AAAA;AAAA;AAAA,6EAkBS,iBAAsB,WAAtB,EAAsC,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,gBAAA,MADD,GACU,MAAM,CAAC,KAAP,CAAa,IAAb,CADV,EAC8B;;AAC7B,gBAAA,MAFD,GAEU,KAAK,cAAL,CAAoB,GAApB,CAAwB,WAAxB,CAFV;;AAAA,oBAGA,MAHA;AAAA;AAAA;AAAA;;AAAA,sBAIG,IAAI,KAAJ,4BAA8B,WAA9B,EAJH;;AAAA;AAMC,gBAAA,GAND,GAMO,MAAM,CAAC,MAAP,CAAc,OAAd,EAAuB,MAAvB,CANP;AAOD,gBAAA,WAPC,GAOa,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,GAAhB,CAPb;AAQD,gBAAA,aARC,GAQe,aAAa,CAAC,oBAAd,CAAmC,WAAnC,CARf;AAAA,iDASE,MAAM,CAAC,MAAP,CAAc,CAAC,aAAD,EAAgB,WAAhB,CAAd,CATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAlBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,WA8BS,gBAAgB,WAAhB,EAAgC,EAAhC,EAA0C;AAC/C;AACA,UAAM,IAAI,GAAG,EAAE,CAAC,KAAH,CAAS,CAAT,CAAb;AACA,UAAM,MAAM,GAAG,KAAK,cAAL,CAAoB,GAApB,CAAwB,WAAxB,CAAf;;AACA,UAAI,CAAC,MAAL,EAAa;AACX,cAAM,IAAI,KAAJ,4BAA8B,WAA9B,EAAN;AACD;;AACD,aAAO,MAAM,CAAC,MAAP,CAAc,IAAd,CAAP;AACD;AAED;;;;AAIG;;AA5CL;AAAA;AAAA,WA6CS,8BAA4B,IAA5B,EAAwC;AAC7C,aAAO,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,MAAP,mBAAyB,IAAzB,EAAZ,EAA8C,KAA9C,CAAoD,CAApD,EAAuD,CAAvD,CAAP;AACD;AA/CH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["import { IdlCoder } from \"./idl\";\nimport { sha256 } from \"js-sha256\";\n/**\n * Number of bytes of the account discriminator.\n */\nexport const ACCOUNT_DISCRIMINATOR_SIZE = 8;\n/**\n * Encodes and decodes account objects.\n */\nexport class AccountsCoder {\n    constructor(idl) {\n        if (idl.accounts === undefined) {\n            this.accountLayouts = new Map();\n            return;\n        }\n        const layouts = idl.accounts.map((acc) => {\n            return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n        });\n        this.accountLayouts = new Map(layouts);\n    }\n    async encode(accountName, account) {\n        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n        const layout = this.accountLayouts.get(accountName);\n        if (!layout) {\n            throw new Error(`Unknown account: ${accountName}`);\n        }\n        const len = layout.encode(account, buffer);\n        let accountData = buffer.slice(0, len);\n        let discriminator = AccountsCoder.accountDiscriminator(accountName);\n        return Buffer.concat([discriminator, accountData]);\n    }\n    decode(accountName, ix) {\n        // Chop off the discriminator before decoding.\n        const data = ix.slice(8);\n        const layout = this.accountLayouts.get(accountName);\n        if (!layout) {\n            throw new Error(`Unknown account: ${accountName}`);\n        }\n        return layout.decode(data);\n    }\n    /**\n     * Calculates and returns a unique 8 byte discriminator prepended to all anchor accounts.\n     *\n     * @param name The name of the account to calculate the discriminator.\n     */\n    static accountDiscriminator(name) {\n        return Buffer.from(sha256.digest(`account:${name}`)).slice(0, 8);\n    }\n}\n//# sourceMappingURL=accounts.js.map"]},"metadata":{},"sourceType":"module"}