{"ast":null,"code":"import _regeneratorRuntime from\"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import twitterLogo from\"./assets/twitter-logo.svg\";import'./App.css';import{useEffect,useState}from'react';import idl from'./idl.json';import{Connection,PublicKey,clusterApiUrl}from'@solana/web3.js';import{Program,Provider,web3}from'@project-serum/anchor';import kp from'./keypair.json';// Constants\n// SystemProgram is a reference to the Solana runtime!\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var SystemProgram=web3.SystemProgram,Keypair=web3.Keypair;// Create a keypair for the account that will hold the GIF data.\nvar arr=Object.values(kp._keypair.secretKey);var secret=new Uint8Array(arr);var baseAccount=web3.Keypair.fromSecretKey(secret);// Get our program's id form the IDL file.\nvar programID=new PublicKey(idl.metadata.address);// Set our network to devent.\nvar network=clusterApiUrl('devnet');// Control's how we want to acknowledge when a trasnaction is \"done\".\nvar opts={preflightCommitment:\"processed\"};// TEST GIFS\nvar TEST_GIFS=['https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp','https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g','https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g','https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'];// buildspace twitter stuff\nvar TWITTER_HANDLE='_buildspace';var TWITTER_LINK=\"https://twitter.com/\".concat(TWITTER_HANDLE);var App=function App(){// State\nvar _useState=useState(null),_useState2=_slicedToArray(_useState,2),walletAddress=_useState2[0],setWalletAddress=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),inputValue=_useState4[0],setInputValue=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),gifList=_useState6[0],setGifList=_useState6[1];// Is phantom wallet connected?\nvar checkIfWalletIsConnected=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _window,solana,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_window=window,solana=_window.solana;if(!solana){_context.next=13;break;}if(!solana.isPhantom){_context.next=12;break;}console.log('Phantom Wallet is found!');_context.next=7;return solana.connect({onlyIfTrusted:true});case 7:response=_context.sent;console.log('Connected with PubKey:',response.publicKey.toString());setWalletAddress(response.publicKey.toString());_context.next=13;break;case 12:alert('Solana obj is not found - get Phantom Wallet');case 13:_context.next=18;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](0);console.log('err');case 18:case\"end\":return _context.stop();}}},_callee,null,[[0,15]]);}));return function checkIfWalletIsConnected(){return _ref.apply(this,arguments);};}();// Connect Wallet Logic\nvar connectWallet=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _window2,solana,response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// Render UI when user wallet is not connected\n_window2=window,solana=_window2.solana;if(!solana){_context2.next=7;break;}_context2.next=4;return solana.connect();case 4:response=_context2.sent;console.log('Connected with pubKey:',response.publicKey.toString());setWalletAddress(response.publicKey.toString());case 7:case\"end\":return _context2.stop();}}},_callee2);}));return function connectWallet(){return _ref2.apply(this,arguments);};}();// Send Gif from valid link to our grid\nvar sendGif=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var provider,program;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(inputValue.length===0)){_context3.next=3;break;}console.log('No gif link given!');return _context3.abrupt(\"return\");case 3:console.log('Gif link:',inputValue);_context3.prev=4;provider=getProvider();program=new Program(idl,programID,provider);_context3.next=9;return program.rpc.addGif(inputValue,{accounts:{baseAccount:baseAccount.publicKey}});case 9:console.log('Gif successfully sent to our program',inputValue);_context3.next=12;return getGifList();case 12:_context3.next=17;break;case 14:_context3.prev=14;_context3.t0=_context3[\"catch\"](4);console.log('Error sending gif to program',_context3.t0);case 17:case\"end\":return _context3.stop();}}},_callee3,null,[[4,14]]);}));return function sendGif(){return _ref3.apply(this,arguments);};}();// Get Input Change\nvar onInputChange=function onInputChange(event){var value=event.target.value;setInputValue(value);};var getProvider=function getProvider(){var connection=new Connection(network,opts.preflightCommitment);var provider=new Provider(connection,window.solana,opts.preflightCommitment);return provider;};// Call Initialize\nvar createGifAccount=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var provider,program;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;provider=getProvider();program=new Program(idl,programID,provider);console.log('ping');_context4.next=6;return program.rpc.initialize({accounts:{baseAccount:baseAccount.publicKey,user:provider.wallet.publicKey,systemProgram:SystemProgram.programId},signers:[baseAccount]});case 6:console.log('Created a new BaseAccount w/ address:',baseAccount.publicKey.toString());_context4.next=9;return getGifList();case 9:_context4.next=14;break;case 11:_context4.prev=11;_context4.t0=_context4[\"catch\"](0);console.log('Error creating BaseAccount account:',_context4.t0);case 14:case\"end\":return _context4.stop();}}},_callee4,null,[[0,11]]);}));return function createGifAccount(){return _ref4.apply(this,arguments);};}();var renderNotConnectedContainer=function renderNotConnectedContainer(){return/*#__PURE__*/_jsx(\"button\",{className:\"cta-button connect-wallet-button\",onClick:connectWallet,children:\"Connect Wallet!\"});};var renderConnectedContainer=function renderConnectedContainer(){// Program Account Not init\nif(gifList===null){return/*#__PURE__*/_jsx(\"div\",{className:\"connected-container\",children:/*#__PURE__*/_jsx(\"button\",{className:\"cta-button submit-gif-button\",onClick:createGifAccount,children:\"One Time Init for GIF Program Account\"})});}else{// Account exists and user can submit gifs\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"connected-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter gif link here!\",value:inputValue,onChange:onInputChange}),/*#__PURE__*/_jsx(\"button\",{className:\"cta-button submit-gif-button\",onClick:sendGif,children:\"Submit Gif!\"}),/*#__PURE__*/_jsx(\"div\",{className:\"gif-grid\",children:gifList.map(function(item,index){return/*#__PURE__*/_jsxs(\"div\",{className:\"gif-item\",children:[/*#__PURE__*/_jsx(\"img\",{src:item.gifLink,alt:item.gifLink}),/*#__PURE__*/_jsxs(\"p\",{className:\"submit-text\",children:[\"Submitted by: \",item.userAddress.toString()]})]},index);})})]});}};// get gif list\nvar getGifList=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var provider,program,account;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;provider=getProvider();program=new Program(idl,programID,provider);_context5.next=5;return program.account.baseAccount.fetch(baseAccount.publicKey);case 5:account=_context5.sent;console.log('Account retrieved',account);setGifList(account.gifList);_context5.next=14;break;case 10:_context5.prev=10;_context5.t0=_context5[\"catch\"](0);console.log('getGifs error: ',_context5.t0);setGifList(null);case 14:case\"end\":return _context5.stop();}}},_callee5,null,[[0,10]]);}));return function getGifList(){return _ref5.apply(this,arguments);};}();// Check for connected wallet\nuseEffect(function(){window.addEventListener('load',/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(event){return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return checkIfWalletIsConnected();case 2:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x){return _ref6.apply(this,arguments);};}());},[]);// Fetch gif list from connected wallet\nuseEffect(function(){if(walletAddress){console.log('Fetching Gif List...');// Call solana program && set state\ngetGifList();}},[walletAddress]);return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"div\",{className:walletAddress?'authed-container':'container',children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header-container\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"header\",children:\"Gifurry\"}),/*#__PURE__*/_jsx(\"p\",{className:\"sub-text\",children:\"\\u2728 add gifs of fur frens to explore the metaverse with \\u2728\"}),!walletAddress&&renderNotConnectedContainer(),walletAddress&&renderConnectedContainer()]}),/*#__PURE__*/_jsxs(\"div\",{className:\"footer-container\",children:[/*#__PURE__*/_jsx(\"img\",{alt:\"Twitter Logo\",className:\"twitter-logo\",src:twitterLogo}),/*#__PURE__*/_jsx(\"a\",{className:\"footer-text\",href:TWITTER_LINK,target:\"_blank\",rel:\"noreferrer\",children:\"built on @\".concat(TWITTER_HANDLE)})]})]})});};export default App;","map":{"version":3,"sources":["/home/jet/Documents/buildspace/Gitfurry/src/App.js"],"names":["useEffect","useState","idl","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","kp","SystemProgram","Keypair","arr","Object","values","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","metadata","address","network","opts","preflightCommitment","TEST_GIFS","TWITTER_HANDLE","TWITTER_LINK","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","connectWallet","sendGif","length","provider","getProvider","program","rpc","addGif","accounts","getGifList","onInputChange","event","value","target","connection","createGifAccount","initialize","user","wallet","systemProgram","programId","signers","renderNotConnectedContainer","renderConnectedContainer","map","item","index","gifLink","userAddress","account","fetch","addEventListener","twitterLogo"],"mappings":"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","sourcesContent":["import twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport {useEffect, useState} from 'react';\nimport idl from './idl.json';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport kp from './keypair.json';\n\n// Constants\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// Get our program's id form the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devent.\nconst network = clusterApiUrl('devnet');\n\n// Control's how we want to acknowledge when a trasnaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// TEST GIFS\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\n// buildspace twitter stuff\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n  // Is phantom wallet connected?\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {solana} = window;\n\n      if(solana) {\n        if(solana.isPhantom) {\n          console.log('Phantom Wallet is found!');\n          const response = await solana.connect({onlyIfTrusted: true});\n          console.log('Connected with PubKey:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        } else {\n          alert('Solana obj is not found - get Phantom Wallet');\n        }\n      }\n    } catch (err) {\n      console.log('err');\n    }\n  };\n\n  // Connect Wallet Logic\n  const connectWallet = async () => {\n    // Render UI when user wallet is not connected\n    const {solana} = window;\n\n    if(solana) {\n      const response = await solana.connect();\n      console.log('Connected with pubKey:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  // Send Gif from valid link to our grid\n  const sendGif = async () => {\n    if(inputValue.length === 0) {\n      console.log('No gif link given!');\n      return;\n    }\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n        },\n      });\n      console.log('Gif successfully sent to our program', inputValue);\n\n      await getGifList();\n    } catch (err) {\n      console.log('Error sending gif to program', err);\n    }\n  };\n\n  // Get Input Change\n  const onInputChange = (event) => {\n    const {value} = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  // Call Initialize\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log('ping')\n      await program.rpc.initialize({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log('Created a new BaseAccount w/ address:', baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(err) {\n      console.log('Error creating BaseAccount account:', err)\n    }\n  }\n  \n  const renderNotConnectedContainer = () => (\n    <button\n      className='cta-button connect-wallet-button'\n      onClick={connectWallet}\n    >\n      Connect Wallet!\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // Program Account Not init\n    if(gifList === null) {\n      return (\n        <div className='connected-container'>\n          <button className='cta-button submit-gif-button' onClick={createGifAccount}>One Time Init for GIF Program Account</button>\n        </div>\n      )\n    }\n    else {\n      // Account exists and user can submit gifs\n      return(\n      <div className='connected-container'>\n        <input type='text' placeholder='Enter gif link here!' value={inputValue} onChange={onInputChange}/>\n        <button className='cta-button submit-gif-button' onClick={sendGif}>Submit Gif!</button>\n        <div className='gif-grid'>\n          {gifList.map((item, index) => (\n            <div className='gif-item' key={index}>\n              <img src={item.gifLink} alt={item.gifLink}/>\n              <p className='submit-text'>Submitted by: {item.userAddress.toString()}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n      )\n    }\n  };\n\n  // get gif list\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log('Account retrieved', account)\n      setGifList(account.gifList)\n  \n    } catch (err) {\n      console.log('getGifs error: ', err)\n      setGifList(null);\n    }\n  }\n\n  // Check for connected wallet\n  useEffect(() => {\n    window.addEventListener('load', async (event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  // Fetch gif list from connected wallet\n  useEffect(() => {\n    if(walletAddress) {\n      console.log('Fetching Gif List...');\n      // Call solana program && set state\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">Gifurry</p>\n          <p className=\"sub-text\">\n          ✨ add gifs of fur frens to explore the metaverse with ✨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}