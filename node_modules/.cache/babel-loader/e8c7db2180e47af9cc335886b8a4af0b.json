{"ast":null,"code":"import _regeneratorRuntime from \"/home/jet/Documents/buildspace/Gifurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/home/jet/Documents/buildspace/Gifurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/home/jet/Documents/buildspace/Gifurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jet/Documents/buildspace/Gifurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jet/Documents/buildspace/Gifurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { splitArgsAndCtx } from \"../context\";\nimport { ProgramError } from \"../../error\";\n\nvar RpcFactory = /*#__PURE__*/function () {\n  function RpcFactory() {\n    _classCallCheck(this, RpcFactory);\n  }\n\n  _createClass(RpcFactory, null, [{\n    key: \"build\",\n    value: function build(idlIx, txFn, idlErrors, provider) {\n      var rpc = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _len,\n              args,\n              _key,\n              tx,\n              _splitArgsAndCtx,\n              _splitArgsAndCtx2,\n              ctx,\n              txSig,\n              translatedErr,\n              _args = arguments;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = _args[_key];\n                  }\n\n                  tx = txFn.apply(void 0, args);\n                  _splitArgsAndCtx = splitArgsAndCtx(idlIx, [].concat(args)), _splitArgsAndCtx2 = _slicedToArray(_splitArgsAndCtx, 2), ctx = _splitArgsAndCtx2[1];\n                  _context.prev = 3;\n                  _context.next = 6;\n                  return provider.send(tx, ctx.signers, ctx.options);\n\n                case 6:\n                  txSig = _context.sent;\n                  return _context.abrupt(\"return\", txSig);\n\n                case 10:\n                  _context.prev = 10;\n                  _context.t0 = _context[\"catch\"](3);\n                  console.log(\"Translating error\", _context.t0);\n                  translatedErr = ProgramError.parse(_context.t0, idlErrors);\n\n                  if (!(translatedErr === null)) {\n                    _context.next = 16;\n                    break;\n                  }\n\n                  throw _context.t0;\n\n                case 16:\n                  throw translatedErr;\n\n                case 17:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[3, 10]]);\n        }));\n\n        return function rpc() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      return rpc;\n    }\n  }]);\n\n  return RpcFactory;\n}();\n\nexport { RpcFactory as default };","map":{"version":3,"sources":["../../../../src/program/namespace/rpc.ts"],"names":[],"mappings":";;;;;AAGA,SAAS,eAAT,QAAgC,YAAhC;AAEA,SAAS,YAAT,QAA6B,aAA7B;;IAOqB,U;;;;;;;WACZ,eACL,KADK,EAEL,IAFK,EAGL,SAHK,EAIL,QAJK,EAIa;AAElB,UAAM,GAAG;AAAA,4EAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4CAAU,IAAV;AAAU,oBAAA,IAAV;AAAA;;AACnB,kBAAA,EADmB,GACd,IAAI,MAAJ,SAAQ,IAAR,CADc;AAAA,qCAET,eAAe,CAAC,KAAD,YAAY,IAAZ,EAFN,2DAEhB,GAFgB;AAAA;AAAA;AAAA,yBAIH,QAAQ,CAAC,IAAT,CAAc,EAAd,EAAkB,GAAG,CAAC,OAAtB,EAA+B,GAAG,CAAC,OAAnC,CAJG;;AAAA;AAIjB,kBAAA,KAJiB;AAAA,mDAKhB,KALgB;;AAAA;AAAA;AAAA;AAOvB,kBAAA,OAAO,CAAC,GAAR,CAAY,mBAAZ;AACI,kBAAA,aARmB,GAQH,YAAY,CAAC,KAAb,cAAwB,SAAxB,CARG;;AAAA,wBASnB,aAAa,KAAK,IATC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,wBAYjB,aAZiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAlB;;AAAA,wBAAH,GAAG;AAAA;AAAA;AAAA,SAAT;;AAgBA,aAAO,GAAP;AACD;;;;;;SAxBkB,U","sourceRoot":"","sourcesContent":["import { splitArgsAndCtx } from \"../context\";\nimport { ProgramError } from \"../../error\";\nexport default class RpcFactory {\n    static build(idlIx, txFn, idlErrors, provider) {\n        const rpc = async (...args) => {\n            const tx = txFn(...args);\n            const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n            try {\n                const txSig = await provider.send(tx, ctx.signers, ctx.options);\n                return txSig;\n            }\n            catch (err) {\n                console.log(\"Translating error\", err);\n                let translatedErr = ProgramError.parse(err, idlErrors);\n                if (translatedErr === null) {\n                    throw err;\n                }\n                throw translatedErr;\n            }\n        };\n        return rpc;\n    }\n}\n//# sourceMappingURL=rpc.js.map"]},"metadata":{},"sourceType":"module"}