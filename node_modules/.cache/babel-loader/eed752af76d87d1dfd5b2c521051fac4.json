{"ast":null,"code":"var _jsxFileName = \"/home/jet/Documents/buildspace/gif-portal-starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport idl from './idl.json'; // Constants\n// TEST GIFS\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TEST_GIFS = ['https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp', 'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g', 'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g', 'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp']; // buildspace twitter stuff\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  _s();\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]); // Is phantom wallet connected?\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom Wallet is found!');\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log('Connected with PubKey:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        } else {\n          alert('Solana obj is not found - get Phantom Wallet');\n        }\n      }\n    } catch (err) {\n      console.log('err');\n    }\n  }; // Connect Wallet Logic\n\n\n  const connectWallet = async () => {\n    // Render UI when user wallet is not connected\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with pubKey:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  }; // Send Gif from valid link to our grid\n\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link supplied:', inputValue);\n    } else {\n      console.log('Empty input value - try again.');\n    }\n  }; // Get Input Change\n\n\n  const onInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValue(value);\n  };\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect Wallet!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter gif link here!\",\n      value: inputValue,\n      onChange: onInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"cta-button submit-gif-button\",\n      onClick: sendGif,\n      children: \"Submit Gif!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: gifList.map(gif => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-item\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: gif,\n          alt: gif\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)\n      }, gif, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this); // Check for connected wallet\n\n\n  useEffect(() => {\n    window.addEventListener('load', async event => {\n      await checkIfWalletIsConnected();\n    });\n  }, []); // Fetch gif list from connected wallet\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching Gif List...'); // Call solana program && set state\n\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83D\\uDDBC jetgoof's portal to Solana\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Jump into your metaverse gif library \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"GUp0OLdI+EDuCRRqm+ZLCxBP30A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/jet/Documents/buildspace/gif-portal-starter/src/App.js"],"names":["useEffect","useState","idl","TEST_GIFS","TWITTER_HANDLE","TWITTER_LINK","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","solana","window","isPhantom","console","log","response","connect","onlyIfTrusted","publicKey","toString","alert","err","connectWallet","sendGif","length","onInputChange","event","value","target","renderNotConnectedContainer","renderConnectedContainer","map","gif","addEventListener","twitterLogo"],"mappings":"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","sourcesContent":["import twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport {useEffect, useState} from 'react';\nimport idl from './idl.json';\n\n// Constants\n\n// TEST GIFS\nconst TEST_GIFS = [\n\t'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n\t'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n\t'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n\t'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp'\n]\n\n// buildspace twitter stuff\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n  // Is phantom wallet connected?\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {solana} = window;\n\n      if(solana) {\n        if(solana.isPhantom) {\n          console.log('Phantom Wallet is found!');\n          const response = await solana.connect({onlyIfTrusted: true});\n          console.log('Connected with PubKey:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        } else {\n          alert('Solana obj is not found - get Phantom Wallet');\n        }\n      }\n    } catch (err) {\n      console.log('err');\n    }\n  };\n\n  // Connect Wallet Logic\n  const connectWallet = async () => {\n    // Render UI when user wallet is not connected\n    const {solana} = window;\n\n    if(solana) {\n      const response = await solana.connect();\n      console.log('Connected with pubKey:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  // Send Gif from valid link to our grid\n  const sendGif = async () => {\n    if(inputValue.length > 0) {\n      console.log('Gif link supplied:', inputValue);\n    } else {\n      console.log('Empty input value - try again.');\n    }\n  };\n\n  // Get Input Change\n  const onInputChange = (event) => {\n    const {value} = event.target;\n    setInputValue(value);\n  };\n  \n  const renderNotConnectedContainer = () => (\n    <button\n      className='cta-button connect-wallet-button'\n      onClick={connectWallet}\n    >\n      Connect Wallet!\n    </button>\n  );\n\n  const renderConnectedContainer = () => (\n    <div className='connected-container'>\n      <input type='text' placeholder='Enter gif link here!' value={inputValue} onChange={onInputChange}/>\n      <button className='cta-button submit-gif-button' onClick={sendGif}>Submit Gif!</button>\n      <div className='gif-grid'>\n        {gifList.map((gif) => (\n          <div className='gif-item' key={gif}>\n            <img src={gif} alt={gif} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  // Check for connected wallet\n  useEffect(() => {\n    window.addEventListener('load', async (event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  // Fetch gif list from connected wallet\n  useEffect(() => {\n    if(walletAddress) {\n      console.log('Fetching Gif List...');\n\n      // Call solana program && set state\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">🖼 jetgoof's portal to Solana</p>\n          <p className=\"sub-text\">\n            Jump into your metaverse gif library ✨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}