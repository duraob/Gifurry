{"ast":null,"code":"import _regeneratorRuntime from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jet/Documents/buildspace/Gitfurry/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { splitArgsAndCtx } from \"../context\";\nimport { EventParser } from \"../event\";\nimport { ProgramError } from \"../../error\";\n\nvar SimulateFactory = /*#__PURE__*/function () {\n  function SimulateFactory() {\n    _classCallCheck(this, SimulateFactory);\n  }\n\n  _createClass(SimulateFactory, null, [{\n    key: \"build\",\n    value: function build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n      var simulate = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _len,\n              args,\n              _key,\n              tx,\n              _splitArgsAndCtx,\n              _splitArgsAndCtx2,\n              ctx,\n              resp,\n              translatedErr,\n              logs,\n              events,\n              parser,\n              _args = arguments;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = _args[_key];\n                  }\n\n                  tx = txFn.apply(void 0, args);\n                  _splitArgsAndCtx = splitArgsAndCtx(idlIx, [].concat(args)), _splitArgsAndCtx2 = _slicedToArray(_splitArgsAndCtx, 2), ctx = _splitArgsAndCtx2[1];\n                  resp = undefined;\n                  _context.prev = 4;\n                  _context.next = 7;\n                  return provider.simulate(tx, ctx.signers, ctx.options);\n\n                case 7:\n                  resp = _context.sent;\n                  _context.next = 17;\n                  break;\n\n                case 10:\n                  _context.prev = 10;\n                  _context.t0 = _context[\"catch\"](4);\n                  console.log(\"Translating error\", _context.t0);\n                  translatedErr = ProgramError.parse(_context.t0, idlErrors);\n\n                  if (!(translatedErr === null)) {\n                    _context.next = 16;\n                    break;\n                  }\n\n                  throw _context.t0;\n\n                case 16:\n                  throw translatedErr;\n\n                case 17:\n                  if (!(resp === undefined)) {\n                    _context.next = 19;\n                    break;\n                  }\n\n                  throw new Error(\"Unable to simulate transaction\");\n\n                case 19:\n                  if (!resp.value.err) {\n                    _context.next = 21;\n                    break;\n                  }\n\n                  throw new Error(\"Simulate error: \".concat(resp.value.err.toString()));\n\n                case 21:\n                  logs = resp.value.logs;\n\n                  if (logs) {\n                    _context.next = 24;\n                    break;\n                  }\n\n                  throw new Error(\"Simulated logs not found\");\n\n                case 24:\n                  events = [];\n\n                  if (idl.events) {\n                    parser = new EventParser(programId, coder);\n                    parser.parseLogs(logs, function (event) {\n                      events.push(event);\n                    });\n                  }\n\n                  return _context.abrupt(\"return\", {\n                    events: events,\n                    raw: logs\n                  });\n\n                case 27:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[4, 10]]);\n        }));\n\n        return function simulate() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      return simulate;\n    }\n  }]);\n\n  return SimulateFactory;\n}();\n\nexport { SimulateFactory as default };","map":{"version":3,"sources":["../../../../src/program/namespace/simulate.ts"],"names":[],"mappings":";;;;;AAMA,SAAS,eAAT,QAAgC,YAAhC;AAEA,SAAS,WAAT,QAAmC,UAAnC;AAGA,SAAS,YAAT,QAA6B,aAA7B;;IAQqB,e;;;;;;;WACZ,eACL,KADK,EAEL,IAFK,EAGL,SAHK,EAIL,QAJK,EAKL,KALK,EAML,SANK,EAOL,GAPK,EAOG;AAER,UAAM,QAAQ;AAAA,4EAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4CAAU,IAAV;AAAU,oBAAA,IAAV;AAAA;;AAC1B,kBAAA,EAD0B,GACrB,IAAI,MAAJ,SAAQ,IAAR,CADqB;AAAA,qCAEhB,eAAe,CAAC,KAAD,YAAY,IAAZ,EAFC,2DAEvB,GAFuB;AAG5B,kBAAA,IAH4B,GAKhB,SALgB;AAAA;AAAA;AAAA,yBAOjB,QAAS,CAAC,QAAV,CAAmB,EAAnB,EAAuB,GAAG,CAAC,OAA3B,EAAoC,GAAG,CAAC,OAAxC,CAPiB;;AAAA;AAO9B,kBAAA,IAP8B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAS9B,kBAAA,OAAO,CAAC,GAAR,CAAY,mBAAZ;AACI,kBAAA,aAV0B,GAUV,YAAY,CAAC,KAAb,cAAwB,SAAxB,CAVU;;AAAA,wBAW1B,aAAa,KAAK,IAXQ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,wBAcxB,aAdwB;;AAAA;AAAA,wBAgB5B,IAAI,KAAK,SAhBmB;AAAA;AAAA;AAAA;;AAAA,wBAiBxB,IAAI,KAAJ,CAAU,gCAAV,CAjBwB;;AAAA;AAAA,uBAmB5B,IAAI,CAAC,KAAL,CAAW,GAnBiB;AAAA;AAAA;AAAA;;AAAA,wBAoBxB,IAAI,KAAJ,2BAA6B,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,QAAf,EAA7B,EApBwB;;AAAA;AAsB1B,kBAAA,IAtB0B,GAsBnB,IAAI,CAAC,KAAL,CAAW,IAtBQ;;AAAA,sBAuB3B,IAvB2B;AAAA;AAAA;AAAA;;AAAA,wBAwBxB,IAAI,KAAJ,CAAU,0BAAV,CAxBwB;;AAAA;AA2B1B,kBAAA,MA3B0B,GA2BiB,EA3BjB;;AA4BhC,sBAAI,GAAG,CAAC,MAAR,EAAgB;AACV,oBAAA,MADU,GACD,IAAI,WAAJ,CAAgB,SAAhB,EAA2B,KAA3B,CADC;AAEd,oBAAA,MAAM,CAAC,SAAP,CAAiB,IAAjB,EAAuB,UAAC,KAAD,EAAU;AAC/B,sBAAA,MAAM,CAAC,IAAP,CAAY,KAAZ;AACD,qBAFD;AAGD;;AAjC+B,mDAkCzB;AAAE,oBAAA,MAAM,EAAN,MAAF;AAAU,oBAAA,GAAG,EAAE;AAAf,mBAlCyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAApB;;AAAA,wBAAR,QAAQ;AAAA;AAAA;AAAA,SAAd;;AAqCA,aAAO,QAAP;AACD;;;;;;SAhDkB,e","sourceRoot":"","sourcesContent":["import { splitArgsAndCtx } from \"../context\";\nimport { EventParser } from \"../event\";\nimport { ProgramError } from \"../../error\";\nexport default class SimulateFactory {\n    static build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n        const simulate = async (...args) => {\n            const tx = txFn(...args);\n            const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n            let resp = undefined;\n            try {\n                resp = await provider.simulate(tx, ctx.signers, ctx.options);\n            }\n            catch (err) {\n                console.log(\"Translating error\", err);\n                let translatedErr = ProgramError.parse(err, idlErrors);\n                if (translatedErr === null) {\n                    throw err;\n                }\n                throw translatedErr;\n            }\n            if (resp === undefined) {\n                throw new Error(\"Unable to simulate transaction\");\n            }\n            if (resp.value.err) {\n                throw new Error(`Simulate error: ${resp.value.err.toString()}`);\n            }\n            const logs = resp.value.logs;\n            if (!logs) {\n                throw new Error(\"Simulated logs not found\");\n            }\n            const events = [];\n            if (idl.events) {\n                let parser = new EventParser(programId, coder);\n                parser.parseLogs(logs, (event) => {\n                    events.push(event);\n                });\n            }\n            return { events, raw: logs };\n        };\n        return simulate;\n    }\n}\n//# sourceMappingURL=simulate.js.map"]},"metadata":{},"sourceType":"module"}